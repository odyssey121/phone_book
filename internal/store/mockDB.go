// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package store

import (
	mock "github.com/stretchr/testify/mock"
)

// NewMockDB creates a new instance of MockDB. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDB(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDB {
	mock := &MockDB{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockDB is an autogenerated mock type for the DB type
type MockDB struct {
	mock.Mock
}

type MockDB_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDB) EXPECT() *MockDB_Expecter {
	return &MockDB_Expecter{mock: &_m.Mock}
}

// CountRecords provides a mock function for the type MockDB
func (_mock *MockDB) CountRecords() int {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for CountRecords")
	}

	var r0 int
	if returnFunc, ok := ret.Get(0).(func() int); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(int)
	}
	return r0
}

// MockDB_CountRecords_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CountRecords'
type MockDB_CountRecords_Call struct {
	*mock.Call
}

// CountRecords is a helper method to define mock.On call
func (_e *MockDB_Expecter) CountRecords() *MockDB_CountRecords_Call {
	return &MockDB_CountRecords_Call{Call: _e.mock.On("CountRecords")}
}

func (_c *MockDB_CountRecords_Call) Run(run func()) *MockDB_CountRecords_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDB_CountRecords_Call) Return(n int) *MockDB_CountRecords_Call {
	_c.Call.Return(n)
	return _c
}

func (_c *MockDB_CountRecords_Call) RunAndReturn(run func() int) *MockDB_CountRecords_Call {
	_c.Call.Return(run)
	return _c
}

// Insert provides a mock function for the type MockDB
func (_mock *MockDB) Insert(first_name string, last_name string, phone int) error {
	ret := _mock.Called(first_name, last_name, phone)

	if len(ret) == 0 {
		panic("no return value specified for Insert")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, string, int) error); ok {
		r0 = returnFunc(first_name, last_name, phone)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockDB_Insert_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Insert'
type MockDB_Insert_Call struct {
	*mock.Call
}

// Insert is a helper method to define mock.On call
//   - first_name
//   - last_name
//   - phone
func (_e *MockDB_Expecter) Insert(first_name interface{}, last_name interface{}, phone interface{}) *MockDB_Insert_Call {
	return &MockDB_Insert_Call{Call: _e.mock.On("Insert", first_name, last_name, phone)}
}

func (_c *MockDB_Insert_Call) Run(run func(first_name string, last_name string, phone int)) *MockDB_Insert_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(int))
	})
	return _c
}

func (_c *MockDB_Insert_Call) Return(err error) *MockDB_Insert_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockDB_Insert_Call) RunAndReturn(run func(first_name string, last_name string, phone int) error) *MockDB_Insert_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function for the type MockDB
func (_mock *MockDB) List() ([]Person, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []Person
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() ([]Person, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() []Person); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Person)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDB_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockDB_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
func (_e *MockDB_Expecter) List() *MockDB_List_Call {
	return &MockDB_List_Call{Call: _e.mock.On("List")}
}

func (_c *MockDB_List_Call) Run(run func()) *MockDB_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDB_List_Call) Return(persons []Person, err error) *MockDB_List_Call {
	_c.Call.Return(persons, err)
	return _c
}

func (_c *MockDB_List_Call) RunAndReturn(run func() ([]Person, error)) *MockDB_List_Call {
	_c.Call.Return(run)
	return _c
}

// Remove provides a mock function for the type MockDB
func (_mock *MockDB) Remove(phone int) error {
	ret := _mock.Called(phone)

	if len(ret) == 0 {
		panic("no return value specified for Remove")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(int) error); ok {
		r0 = returnFunc(phone)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockDB_Remove_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Remove'
type MockDB_Remove_Call struct {
	*mock.Call
}

// Remove is a helper method to define mock.On call
//   - phone
func (_e *MockDB_Expecter) Remove(phone interface{}) *MockDB_Remove_Call {
	return &MockDB_Remove_Call{Call: _e.mock.On("Remove", phone)}
}

func (_c *MockDB_Remove_Call) Run(run func(phone int)) *MockDB_Remove_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *MockDB_Remove_Call) Return(err error) *MockDB_Remove_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockDB_Remove_Call) RunAndReturn(run func(phone int) error) *MockDB_Remove_Call {
	_c.Call.Return(run)
	return _c
}

// Search provides a mock function for the type MockDB
func (_mock *MockDB) Search(number int) *Person {
	ret := _mock.Called(number)

	if len(ret) == 0 {
		panic("no return value specified for Search")
	}

	var r0 *Person
	if returnFunc, ok := ret.Get(0).(func(int) *Person); ok {
		r0 = returnFunc(number)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Person)
		}
	}
	return r0
}

// MockDB_Search_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Search'
type MockDB_Search_Call struct {
	*mock.Call
}

// Search is a helper method to define mock.On call
//   - number
func (_e *MockDB_Expecter) Search(number interface{}) *MockDB_Search_Call {
	return &MockDB_Search_Call{Call: _e.mock.On("Search", number)}
}

func (_c *MockDB_Search_Call) Run(run func(number int)) *MockDB_Search_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *MockDB_Search_Call) Return(person *Person) *MockDB_Search_Call {
	_c.Call.Return(person)
	return _c
}

func (_c *MockDB_Search_Call) RunAndReturn(run func(number int) *Person) *MockDB_Search_Call {
	_c.Call.Return(run)
	return _c
}

// SearchStartWith provides a mock function for the type MockDB
func (_mock *MockDB) SearchStartWith(number int) ([]Person, error) {
	ret := _mock.Called(number)

	if len(ret) == 0 {
		panic("no return value specified for SearchStartWith")
	}

	var r0 []Person
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(int) ([]Person, error)); ok {
		return returnFunc(number)
	}
	if returnFunc, ok := ret.Get(0).(func(int) []Person); ok {
		r0 = returnFunc(number)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Person)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(int) error); ok {
		r1 = returnFunc(number)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDB_SearchStartWith_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SearchStartWith'
type MockDB_SearchStartWith_Call struct {
	*mock.Call
}

// SearchStartWith is a helper method to define mock.On call
//   - number
func (_e *MockDB_Expecter) SearchStartWith(number interface{}) *MockDB_SearchStartWith_Call {
	return &MockDB_SearchStartWith_Call{Call: _e.mock.On("SearchStartWith", number)}
}

func (_c *MockDB_SearchStartWith_Call) Run(run func(number int)) *MockDB_SearchStartWith_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *MockDB_SearchStartWith_Call) Return(persons []Person, err error) *MockDB_SearchStartWith_Call {
	_c.Call.Return(persons, err)
	return _c
}

func (_c *MockDB_SearchStartWith_Call) RunAndReturn(run func(number int) ([]Person, error)) *MockDB_SearchStartWith_Call {
	_c.Call.Return(run)
	return _c
}

// init provides a mock function for the type MockDB
func (_mock *MockDB) init() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for init")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockDB_init_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'init'
type MockDB_init_Call struct {
	*mock.Call
}

// init is a helper method to define mock.On call
func (_e *MockDB_Expecter) init() *MockDB_init_Call {
	return &MockDB_init_Call{Call: _e.mock.On("init")}
}

func (_c *MockDB_init_Call) Run(run func()) *MockDB_init_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDB_init_Call) Return(err error) *MockDB_init_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockDB_init_Call) RunAndReturn(run func() error) *MockDB_init_Call {
	_c.Call.Return(run)
	return _c
}
